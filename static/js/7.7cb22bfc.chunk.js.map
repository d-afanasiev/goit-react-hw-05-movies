{"version":3,"sources":["services/tmdb-api.js","views/HomePage.jsx"],"names":["API_KEY","BASE_URL","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchMovies","searchBooks","nameFilm","fetchMovieById","movieId","fetchActorsById","fetchReviewsById","HomePage","useState","movies","setMovies","useEffect","then","data","results","catch","error","Notify","failure","map","movie","to","id","title"],"mappings":"gVAAMA,EAAU,mCACVC,EAAQ,+B,SAECC,I,2EAAf,4CAAAC,EAAA,6DAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,oF,sBAOO,SAASC,IACd,OAAOX,EAAuB,GAAD,OACxBD,EADwB,uCACeD,IAIvC,SAASc,EAAYC,GAC1B,OAAOb,EAAuB,GAAD,OACxBD,EADwB,iCACSD,EADT,wCACgDe,IAIxE,SAASC,EAAeC,GAC7B,OAAOf,EAAuB,GAAD,OACxBD,EADwB,kBACNgB,EADM,oBACajB,EADb,oBAKxB,SAASkB,EAAgBD,GAC9B,OAAOf,EAAuB,GAAD,OACxBD,EADwB,kBACNgB,EADM,4BACqBjB,EADrB,oBAKxB,SAASmB,EAAiBF,GAC/B,OAAOf,EAAuB,GAAD,OACxBD,EADwB,kBACNgB,EADM,4BACqBjB,EADrB,6B,gIC9BhB,SAASoB,IAAY,IAAD,EACLC,mBAAS,IADJ,mBAC1BC,EAD0B,KAClBC,EADkB,KAWjC,OARAC,qBAAU,WACRX,cACGY,MAAK,SAACC,GACLH,EAAUG,EAAKC,YAEhBC,OAAM,SAACC,GAAD,OAAWC,SAAOC,QAAQF,QAClC,IAGD,qCACE,gDACA,6BACGP,EAAOU,KAAI,SAACC,GAAD,OACV,6BACE,cAAC,IAAD,CAAMC,GAAE,kBAAaD,EAAME,IAA3B,SAAkCF,EAAMG,SADjCH,EAAME","file":"static/js/7.7cb22bfc.chunk.js","sourcesContent":["const API_KEY = \"4e286c2ceeb7113ef3a7d57d0bdb7157\";\r\nconst BASE_URL = `https://api.themoviedb.org/3`;\r\n\r\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\r\n  const response = await fetch(url, config);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchMovies() {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\r\n  );\r\n}\r\n\r\nexport function searchBooks(nameFilm) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${nameFilm}`\r\n  );\r\n}\r\n\r\nexport function fetchMovieById(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\r\n  );\r\n}\r\n\r\nexport function fetchActorsById(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\r\n  );\r\n}\r\n\r\nexport function fetchReviewsById(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { fetchMovies } from \"../services/tmdb-api\";\r\nimport { Notify } from \"notiflix\";\r\n\r\nexport default function HomePage() {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchMovies()\r\n      .then((data) => {\r\n        setMovies(data.results);\r\n      })\r\n      .catch((error) => Notify.failure(error));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>Trending today</h1>\r\n      <ul>\r\n        {movies.map((movie) => (\r\n          <li key={movie.id}>\r\n            <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}