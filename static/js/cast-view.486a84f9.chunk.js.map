{"version":3,"sources":["components/Cast/Cast.jsx"],"names":["Cast","movieId","useState","actors","setActors","useEffect","fetchActorsById","then","cast","catch","error","console","log","renderImage","actor","profile_path","length","map","src","alt","name","width","height","character","id"],"mappings":"0NAIe,SAASA,EAAT,GAA4B,IAAZC,EAAW,EAAXA,QAAW,EACZC,mBAAS,IADG,mBACjCC,EADiC,KACzBC,EADyB,KAGxCC,qBAAU,WACRC,YAAgBL,GACbM,MAAK,SAACJ,GAAD,OAAYC,EAAUD,EAAOK,SAClCC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,QAC/B,CAACT,IAEJ,IAAMY,EAAc,SAACC,GACnB,OAAIA,EAAMC,aACF,mCAAN,OAA0CD,EAAMC,cAEzC,yHAIX,OACE,mCACqB,IAAlBZ,EAAOa,OACN,sEAEA,6BACGb,EAAOc,KAAI,SAACH,GAAD,OACV,+BACE,qBACEI,IAAKL,EAAYC,GACjBK,IAAKL,EAAMM,KACXC,MAAM,MACNC,OAAO,QAET,4BAAIR,EAAMM,OACV,4CAAeN,EAAMS,eARdT,EAAMU","file":"static/js/cast-view.486a84f9.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { fetchActorsById } from \"../../services/tmdb-api\";\r\n\r\nexport default function Cast({ movieId }) {\r\n  const [actors, setActors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchActorsById(movieId)\r\n      .then((actors) => setActors(actors.cast))\r\n      .catch((error) => console.log(error));\r\n  }, [movieId]);\r\n\r\n  const renderImage = (actor) => {\r\n    if (actor.profile_path) {\r\n      return `https://image.tmdb.org/t/p/w500/${actor.profile_path}`;\r\n    } else {\r\n      return \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/488px-No-Image-Placeholder.svg.png\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {actors.length === 0 ? (\r\n        <p>We don't have any cast for this movie</p>\r\n      ) : (\r\n        <ul>\r\n          {actors.map((actor) => (\r\n            <li key={actor.id}>\r\n              <img\r\n                src={renderImage(actor)}\r\n                alt={actor.name}\r\n                width=\"200\"\r\n                height=\"250\"\r\n              />\r\n              <p>{actor.name}</p>\r\n              <p>Character: {actor.character}</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nCast.propTypes = {\r\n  movieId: PropTypes.string,\r\n};\r\n"],"sourceRoot":""}